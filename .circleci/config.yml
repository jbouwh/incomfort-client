# CircleCI 2.1 configuration file for https://github.com/zxdavb/geniushub-client
# Check https://circleci.com/docs/2.0/language-python/ for more details

version: 2.1


jobs:
  build:
    docker:
      - image: circleci/python:3.8.6
    working_directory: ~/repo

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run: mkdir -p $TEST_RESULTS

      - run:
          name: App response
          no_output_timeout: 30
          command: |
            . venv/bin/activate
            python inclient.py ${GATEWAY} | \
              tee ${TEST_RESULTS}/response_app.json

      - run:
          name: App response (rooms)
          no_output_timeout: 30
          command: |
            . venv/bin/activate
            sed '/^ *if _value/  s/is not None/!= 99/' incomfortclient/__init__.py \
              > ${TEST_RESULTS}/__init__.py
            python ${TEST_RESULTS}/__init__.py ${GATEWAY} \
              | tee -a ${TEST_RESULTS}/response_app_rooms.json

      - run:
          name: App response (raw)
          no_output_timeout: 30
          command: |
            . venv/bin/activate
            python inclient.py ${GATEWAY} --raw \
              | tee ${TEST_RESULTS}/response_app_raw.json

      - run:
          name: cURL response (raw)
          no_output_timeout: 30
          command: |
            curl -X GET http://${GATEWAY}/data.json?heater=0 | \
              python -c "import sys, json; print(json.load(sys.stdin))" | \
              tee ${TEST_RESULTS}/response_curl_raw.json

      - run:
          name: Compare cURL vs App (raw)
          no_output_timeout: 30
          command: |
            echo diff -s ${TEST_RESULTS}/response_curl_raw.json ${TEST_RESULTS}/response_app_raw.json | \
              tee -a ${TEST_RESULTS}/test-results.txt
            diff -s ${TEST_RESULTS}/response_curl_raw.json ${TEST_RESULTS}/response_app_raw.json | \
              tee -a ${TEST_RESULTS}/test-results.txt
            echo tee -a ${TEST_RESULTS}/test-results.txt

      - store_artifacts:
          path: /tmp/test-results
          destination: devices_summary

  check_lint:
    docker:
      - image: circleci/python:3.7.5
    steps:
      - checkout
      - run:
          command: |
            sudo pip install black isort
            mkdir test-results
      - run:
          name: "Check formatting 1: black"
          command: |
            black --diff --check *client.py
            black --diff --check incomfort*
      - run:
          name: "Check formatting 2: isort"
          command: |
            isort --check --diff *client.py
            isort --check --diff incomfort*
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: artifacts
          destination: coverage

  deploy:
    docker:
      - image: circleci/python:3.7.5
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt
            sudo pip install twine
      - run:
          name: Verify git tag vs. package version
          command: python setup.py verify
      - run:
          name: Build the package
          command: |
            python setup.py sdist        # create a source distribution
            python setup.py bdist_wheel  # create a wheel
      - run:
          name: Create .pypirc
          command: |
            echo -e "[distutils]"                                  >> ~/.pypirc
            echo -e "index-servers="                               >> ~/.pypirc
            echo -e "    pypi"                                     >> ~/.pypirc
            echo -e "    test"                                     >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
            echo -e "[pypi]"                                       >> ~/.pypirc
            echo -e "repository = https://upload.pypi.org/legacy/" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME"                    >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD"                    >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
            echo -e "[test]"                                       >> ~/.pypirc
            echo -e "repository = https://test.pypi.org/legacy/"   >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME"                    >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD"                    >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
      - run:
          name: Upload to PyPi
          command: twine upload -r pypi dist/*


workflows:
  version: 2

  build-and-deploy:
    jobs:
      - build:
          filters: # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - check_lint:
          requires:
            - build
          filters: # required since `deploy` has tag filters AND requires `build`
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
            - check_lint
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
