# CircleCI 2.1 configuration file for https://github.com/zxdavb/geniushub-client
# Check https://circleci.com/docs/2.0/language-python/ for more details

version: 2.1


jobs:

  check_lint:
    docker:
      - image: cimg/python:3.9.16
    steps:
      - checkout

      - run:
          command: |
            # pip install -r requirements-dev.txt
            pip install black isort
            mkdir test-results
      - run:
          name: "Check formatting 1: black"
          command: |
            black --diff --check *client.py
            black --diff --check incomfort*
      - run:
          name: "Check formatting 2: isort"
          command: |
            isort --check --diff *client.py
            isort --check --diff incomfort*

      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: artifacts
          # destination: coverage


  build:
    docker:
      - image: cimg/python:3.9.16
    environment:
      TEST_RESULTS: ~/test-results
    working_directory: ~/working_directory

    steps:
      - checkout # check out source code to working directory
      - run: mkdir -p $TEST_RESULTS

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}


  test:
    docker:
      - image: cimg/python:3.9.16
    steps:
      - checkout
      - run:
          command: |
            pip3 install -r requirements.txt
            pip3 install -r requirements-dev.txt
            pip3 install -e .
      - run:
          name: Clear the DEV_MODE flags, if set
          command: |
            sed -i -e '/__dev_mode__ =/ s/= .*/= False/' ramses_rf/const.py
            sed -i -e '/__dev_mode__ =/ s/= .*/= False/' ramses_rf/protocol/const.py
      - run:
          name: Clear any DEV_HACK_* flags, if set
          command: |
            sed -i -e '/DEV_HACK_REGEX =/ s/= .*/= False/' ramses_rf/protocol/transport.py
      - run:
          name: "Run pytest"
          command: |
            python3 -m pytest tests -v


  deploy:
    docker:
      - image: cimg/python:3.9.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt
            sudo pip install twine
      - run:
          name: Verify git tag vs. package version
          command: python setup.py verify
      - run:
          name: Build the package
          command: |
            python setup.py sdist        # create a source distribution
            python setup.py bdist_wheel  # create a wheel
      - run:
          name: Create .pypirc
          command: |
            echo -e "[distutils]"                                  >> ~/.pypirc
            echo -e "index-servers="                               >> ~/.pypirc
            echo -e "    pypi"                                     >> ~/.pypirc
            echo -e "    test"                                     >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
            echo -e "[pypi]"                                       >> ~/.pypirc
            echo -e "repository = https://upload.pypi.org/legacy/" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME"                    >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD"                    >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
            echo -e "[test]"                                       >> ~/.pypirc
            echo -e "repository = https://test.pypi.org/legacy/"   >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME"                    >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD"                    >> ~/.pypirc
            echo -e ""                                             >> ~/.pypirc
      - run:
          name: Upload to PyPi
          command: twine upload -r pypi dist/*


workflows:
  version: 2

  build-and-deploy:  # will deploy only if the commit has a tag
    jobs:
      - check_lint:
          filters:
            tags:
              only: /.*/
      # - build:
      #     filters:
      #       tags:
      #         only: /.*/
      # - test:
      #     requires:
      #       - build
      #     filters:
      #       tags:
      #         only: /.*/
      # - deploy:
      #     requires:
      #       - check_lint
      #       - test
      #     filters:
      #       tags:
      #         only: /[0-9]+(\.[0-9]+)*/
      #       branches:
      #         ignore: /.*/
